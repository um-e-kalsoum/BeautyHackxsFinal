{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\hackathon2\\\\beautyhackxs\\\\src\\\\components\\\\Ingredients.js\",\n  _s = $RefreshSig$();\nimport { useState, useRef, useEffect } from 'react';\nimport { Html5Qrcode } from 'html5-qrcode';\n\n// Gemini API key\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GEMINI_API_KEY = 'AIzaSyBHe62Gwvi6X_tCnI4K_-HpN3bUAQTC3HY';\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\nexport default function Ingredients() {\n  _s();\n  const [barcode, setBarcode] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [productInfo, setProductInfo] = useState(null);\n  const [chatMessages, setChatMessages] = useState([{\n    role: 'assistant',\n    content: 'Upload a product image with a barcode to get started! I can answer questions about the ingredients.'\n  }]);\n  const [userMessage, setUserMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const chatContainerRef = useRef(null);\n\n  // Mock product database\n  const productDatabase = {\n    '123456789012': {\n      name: 'Sample Face Cream',\n      brand: 'Beauty Brand',\n      ingredients: [{\n        name: 'Water',\n        purpose: 'Base',\n        concerns: []\n      }, {\n        name: 'Glycerin',\n        purpose: 'Moisturizer',\n        concerns: []\n      }, {\n        name: 'Cetearyl Alcohol',\n        purpose: 'Emulsifier',\n        concerns: ['May cause irritation in sensitive skin']\n      }, {\n        name: 'Dimethicone',\n        purpose: 'Silicone',\n        concerns: ['Environmental concerns', 'Can trap bacteria']\n      }, {\n        name: 'Fragrance',\n        purpose: 'Scent',\n        concerns: ['Common allergen', 'Potentially irritating']\n      }]\n    },\n    '987654321098': {\n      name: 'Natural Serum',\n      brand: 'Eco Beauty',\n      ingredients: [{\n        name: 'Aloe Vera Juice',\n        purpose: 'Soothing base',\n        concerns: []\n      }, {\n        name: 'Hyaluronic Acid',\n        purpose: 'Hydration',\n        concerns: []\n      }, {\n        name: 'Vitamin C',\n        purpose: 'Brightening',\n        concerns: ['Can be unstable in formulations']\n      }, {\n        name: 'Rosehip Oil',\n        purpose: 'Nourishing',\n        concerns: []\n      }]\n    },\n    '3499320004558': {\n      name: 'Sample Face Cream',\n      brand: 'Beauty Brand',\n      ingredients: [{\n        name: 'Water',\n        purpose: 'Base',\n        concerns: []\n      }, {\n        name: 'Glycerin',\n        purpose: 'Moisturizer',\n        concerns: []\n      }, {\n        name: 'Cetearyl Alcohol',\n        purpose: 'Emulsifier',\n        concerns: ['May cause irritation in sensitive skin']\n      }, {\n        name: 'Dimethicone',\n        purpose: 'Silicone',\n        concerns: ['Environmental concerns', 'Can trap bacteria']\n      }, {\n        name: 'Fragrance',\n        purpose: 'Scent',\n        concerns: ['Common allergen', 'Potentially irritating']\n      }]\n    }\n  };\n  useEffect(() => {\n    // Scroll to the bottom of chat when new messages are added\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  // Function to query the Gemini API\n  const queryGeminiAPI = async prompt => {\n    try {\n      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: prompt\n            }]\n          }],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024\n          }\n        })\n      });\n      const data = await response.json();\n      if (data.candidates && data.candidates[0].content) {\n        return data.candidates[0].content.parts[0].text;\n      } else {\n        console.error('Unexpected Gemini API response format:', data);\n        return \"I'm having trouble analyzing this information right now. Please try again later.\";\n      }\n    } catch (error) {\n      console.error('Error querying Gemini API:', error);\n      return \"I encountered an error while processing your question. Please try again later.\";\n    }\n  };\n  const handleImageChange = e => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setSelectedImage(file);\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleScanBarcode = async () => {\n    if (!selectedImage) return;\n    setIsScanning(true);\n    try {\n      const html5QrCode = new Html5Qrcode(\"scanner-container\");\n      const config = {\n        fps: 10\n      };\n\n      // For demonstration, we'll simulate a barcode detection\n      // In a real app, you'd use Html5Qrcode.scanFile() with the image file\n\n      // Simulate scanning for demo purposes - using the specific barcode from the image\n      setTimeout(() => {\n        setIsScanning(false);\n\n        // Use the barcode from the image for the demo\n        const barcode = '3499320004558';\n        setBarcode(barcode);\n        handleProductLookup(barcode);\n      }, 2000);\n\n      // In a real implementation, you would do something like:\n      /*\n      const fileReader = new FileReader();\n      fileReader.onload = async (e) => {\n        try {\n          const result = await html5QrCode.scanFile(selectedImage, true);\n          setBarcode(result);\n          handleProductLookup(result);\n        } catch (error) {\n          console.error(\"Barcode scan error:\", error);\n          setChatMessages(prev => [\n            ...prev,\n            { role: 'assistant', content: 'I couldn\\'t detect a barcode in this image. Please try another image with a clear barcode.' }\n          ]);\n        } finally {\n          setIsScanning(false);\n        }\n      };\n      fileReader.readAsArrayBuffer(selectedImage);\n      */\n    } catch (err) {\n      console.error(\"Error initializing scanner:\", err);\n      setIsScanning(false);\n    }\n  };\n  const handleClearImage = () => {\n    setSelectedImage(null);\n    setImagePreview(null);\n    setBarcode('');\n    setProductInfo(null);\n  };\n  const handleProductLookup = async code => {\n    // In a real app, this would be an API call to a product database\n    setIsLoading(true);\n    setTimeout(async () => {\n      const product = productDatabase[code] || {\n        name: 'Unknown Product',\n        brand: 'Unknown Brand',\n        ingredients: [{\n          name: 'Ingredient data not found',\n          purpose: '',\n          concerns: []\n        }]\n      };\n      setProductInfo(product);\n\n      // Create a prompt for Gemini\n      const ingredientsList = product.ingredients.map(i => i.name).join(', ');\n      const prompt = `You are a beauty product assistant named Beauty Buddy. You just scanned a product: ${product.name} by ${product.brand}. The ingredients are: ${ingredientsList}. Please introduce yourself and offer to answer questions about these ingredients in a brief, friendly way.`;\n      try {\n        // Get response from Gemini API\n        const geminiResponse = await queryGeminiAPI(prompt);\n\n        // Add a message to the chat\n        setChatMessages(prev => [...prev, {\n          role: 'assistant',\n          content: geminiResponse\n        }]);\n      } catch (error) {\n        console.error('Error getting Gemini response:', error);\n        setChatMessages(prev => [...prev, {\n          role: 'assistant',\n          content: `Scanned product: ${product.name} by ${product.brand}.\\nI can answer questions about the ingredients. What would you like to know?`\n        }]);\n      }\n      setIsLoading(false);\n    }, 1500);\n  };\n  const handleChatSubmit = async e => {\n    e.preventDefault();\n    if (!userMessage.trim()) return;\n\n    // Add user message to chat\n    setChatMessages(prev => [...prev, {\n      role: 'user',\n      content: userMessage\n    }]);\n    const currentMessage = userMessage;\n\n    // Clear input field\n    setUserMessage('');\n\n    // Set loading state\n    setIsLoading(true);\n    if (productInfo) {\n      // Create context about the product and ingredients\n      const ingredientsList = productInfo.ingredients.map(i => {\n        const concerns = i.concerns.length > 0 ? `(Concerns: ${i.concerns.join(', ')})` : '(No known concerns)';\n        return `${i.name}: ${i.purpose} ${concerns}`;\n      }).join('\\n');\n      const prompt = `You are a beauty product assistant named Beauty Buddy. A user scanned ${productInfo.name} by ${productInfo.brand} with these ingredients:\n${ingredientsList}\n\nThe chat history is:\n${chatMessages.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nThe user's question is: ${currentMessage}\n\nProvide a helpful, accurate response about these ingredients. Be concise but informative. If you don't know something specific, be honest about it. Focus on the ingredient information provided.`;\n      try {\n        // Get response from Gemini API\n        const geminiResponse = await queryGeminiAPI(prompt);\n\n        // Add assistant response to chat\n        setChatMessages(prev => [...prev, {\n          role: 'assistant',\n          content: geminiResponse\n        }]);\n      } catch (error) {\n        console.error('Error getting Gemini response:', error);\n        setChatMessages(prev => [...prev, {\n          role: 'assistant',\n          content: \"I'm having trouble analyzing the ingredients right now. Please try asking again later.\"\n        }]);\n      }\n    } else {\n      // No product scanned yet\n      setChatMessages(prev => [...prev, {\n        role: 'assistant',\n        content: \"Please scan a product barcode first so I can help you with ingredient information.\"\n      }]);\n    }\n    setIsLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"ingredients-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Ingredient Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Upload a product image with a barcode to check ingredients and ask questions about them.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scanner-chat-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scanner-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"scanner-container\",\n          className: \"scanner-container\",\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"upload-container\",\n          children: !imagePreview ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload-box\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"image-upload\",\n              className: \"upload-label\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-icon\",\n                children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                  xmlns: \"http://www.w3.org/2000/svg\",\n                  width: \"48\",\n                  height: \"48\",\n                  viewBox: \"0 0 24 24\",\n                  fill: \"none\",\n                  stroke: \"currentColor\",\n                  strokeWidth: \"2\",\n                  strokeLinecap: \"round\",\n                  strokeLinejoin: \"round\",\n                  children: [/*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 296,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"polyline\", {\n                    points: \"17 8 12 3 7 8\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 297,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"line\", {\n                    x1: \"12\",\n                    y1: \"3\",\n                    x2: \"12\",\n                    y2: \"15\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 298,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Click to upload a product image with barcode\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"image-upload\",\n              accept: \"image/*\",\n              onChange: handleImageChange,\n              style: {\n                display: 'none'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-preview-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: imagePreview,\n              alt: \"Preview\",\n              className: \"image-preview\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"preview-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"analyze-btn\",\n                onClick: handleScanBarcode,\n                disabled: isScanning,\n                children: isScanning ? 'Scanning Barcode...' : 'Scan Barcode'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 315,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"clear-btn\",\n                onClick: handleClearImage,\n                children: \"Clear\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 322,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this), barcode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"barcode-result\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Barcode: \", barcode]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), productInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"product-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: productInfo.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Brand: \", productInfo.brand]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Beauty Buddy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Ask about the ingredients in your scanned products\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-container\",\n          ref: chatContainerRef,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chat-messages\",\n            children: [chatMessages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `message ${message.role}`,\n              children: message.content\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 17\n            }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message assistant loading\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"loading-dot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 356,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"loading-dot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 357,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"loading-dot\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleChatSubmit,\n          className: \"chat-input-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userMessage,\n            onChange: e => setUserMessage(e.target.value),\n            placeholder: \"Ask about the ingredients...\",\n            className: \"chat-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"chat-submit\",\n            disabled: isLoading,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n}\n_s(Ingredients, \"qZ9zzwChFoKPkSw3uqGl9HwxAms=\");\n_c = Ingredients;\nvar _c;\n$RefreshReg$(_c, \"Ingredients\");","map":{"version":3,"names":["useState","useRef","useEffect","Html5Qrcode","jsxDEV","_jsxDEV","GEMINI_API_KEY","GEMINI_API_URL","Ingredients","_s","barcode","setBarcode","selectedImage","setSelectedImage","imagePreview","setImagePreview","isScanning","setIsScanning","productInfo","setProductInfo","chatMessages","setChatMessages","role","content","userMessage","setUserMessage","isLoading","setIsLoading","chatContainerRef","productDatabase","name","brand","ingredients","purpose","concerns","current","scrollTop","scrollHeight","queryGeminiAPI","prompt","response","fetch","method","headers","body","JSON","stringify","contents","parts","text","generationConfig","temperature","topK","topP","maxOutputTokens","data","json","candidates","console","error","handleImageChange","e","target","files","file","reader","FileReader","onloadend","result","readAsDataURL","handleScanBarcode","html5QrCode","config","fps","setTimeout","handleProductLookup","err","handleClearImage","code","product","ingredientsList","map","i","join","geminiResponse","prev","handleChatSubmit","preventDefault","trim","currentMessage","length","msg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","style","display","htmlFor","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","points","x1","y1","x2","y2","type","accept","onChange","src","alt","onClick","disabled","ref","message","index","onSubmit","value","placeholder","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/hackathon2/beautyhackxs/src/components/Ingredients.js"],"sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport { Html5Qrcode } from 'html5-qrcode';\n\n// Gemini API key\nconst GEMINI_API_KEY = 'AIzaSyBHe62Gwvi6X_tCnI4K_-HpN3bUAQTC3HY';\nconst GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent';\n\nexport default function Ingredients() {\n  const [barcode, setBarcode] = useState('');\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [imagePreview, setImagePreview] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [productInfo, setProductInfo] = useState(null);\n  const [chatMessages, setChatMessages] = useState([\n    { role: 'assistant', content: 'Upload a product image with a barcode to get started! I can answer questions about the ingredients.' }\n  ]);\n  const [userMessage, setUserMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  const chatContainerRef = useRef(null);\n  \n  // Mock product database\n  const productDatabase = {\n    '123456789012': {\n      name: 'Sample Face Cream',\n      brand: 'Beauty Brand',\n      ingredients: [\n        { name: 'Water', purpose: 'Base', concerns: [] },\n        { name: 'Glycerin', purpose: 'Moisturizer', concerns: [] },\n        { name: 'Cetearyl Alcohol', purpose: 'Emulsifier', concerns: ['May cause irritation in sensitive skin'] },\n        { name: 'Dimethicone', purpose: 'Silicone', concerns: ['Environmental concerns', 'Can trap bacteria'] },\n        { name: 'Fragrance', purpose: 'Scent', concerns: ['Common allergen', 'Potentially irritating'] }\n      ]\n    },\n    '987654321098': {\n      name: 'Natural Serum',\n      brand: 'Eco Beauty',\n      ingredients: [\n        { name: 'Aloe Vera Juice', purpose: 'Soothing base', concerns: [] },\n        { name: 'Hyaluronic Acid', purpose: 'Hydration', concerns: [] },\n        { name: 'Vitamin C', purpose: 'Brightening', concerns: ['Can be unstable in formulations'] },\n        { name: 'Rosehip Oil', purpose: 'Nourishing', concerns: [] }\n      ]\n    },\n    '3499320004558': {\n      name: 'Sample Face Cream',\n      brand: 'Beauty Brand',\n      ingredients: [\n        { name: 'Water', purpose: 'Base', concerns: [] },\n        { name: 'Glycerin', purpose: 'Moisturizer', concerns: [] },\n        { name: 'Cetearyl Alcohol', purpose: 'Emulsifier', concerns: ['May cause irritation in sensitive skin'] },\n        { name: 'Dimethicone', purpose: 'Silicone', concerns: ['Environmental concerns', 'Can trap bacteria'] },\n        { name: 'Fragrance', purpose: 'Scent', concerns: ['Common allergen', 'Potentially irritating'] }\n      ]\n    }\n  };\n  \n  useEffect(() => {\n    // Scroll to the bottom of chat when new messages are added\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  // Function to query the Gemini API\n  const queryGeminiAPI = async (prompt) => {\n    try {\n      const response = await fetch(`${GEMINI_API_URL}?key=${GEMINI_API_KEY}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          contents: [\n            {\n              parts: [\n                { text: prompt }\n              ]\n            }\n          ],\n          generationConfig: {\n            temperature: 0.7,\n            topK: 40,\n            topP: 0.95,\n            maxOutputTokens: 1024,\n          }\n        })\n      });\n\n      const data = await response.json();\n      \n      if (data.candidates && data.candidates[0].content) {\n        return data.candidates[0].content.parts[0].text;\n      } else {\n        console.error('Unexpected Gemini API response format:', data);\n        return \"I'm having trouble analyzing this information right now. Please try again later.\";\n      }\n    } catch (error) {\n      console.error('Error querying Gemini API:', error);\n      return \"I encountered an error while processing your question. Please try again later.\";\n    }\n  };\n  \n  const handleImageChange = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      const file = e.target.files[0];\n      setSelectedImage(file);\n      \n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setImagePreview(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  \n  const handleScanBarcode = async () => {\n    if (!selectedImage) return;\n    \n    setIsScanning(true);\n    \n    try {\n      const html5QrCode = new Html5Qrcode(\"scanner-container\");\n      const config = { fps: 10 };\n      \n      // For demonstration, we'll simulate a barcode detection\n      // In a real app, you'd use Html5Qrcode.scanFile() with the image file\n      \n      // Simulate scanning for demo purposes - using the specific barcode from the image\n      setTimeout(() => {\n        setIsScanning(false);\n        \n        // Use the barcode from the image for the demo\n        const barcode = '3499320004558';\n        setBarcode(barcode);\n        handleProductLookup(barcode);\n      }, 2000);\n      \n      // In a real implementation, you would do something like:\n      /*\n      const fileReader = new FileReader();\n      fileReader.onload = async (e) => {\n        try {\n          const result = await html5QrCode.scanFile(selectedImage, true);\n          setBarcode(result);\n          handleProductLookup(result);\n        } catch (error) {\n          console.error(\"Barcode scan error:\", error);\n          setChatMessages(prev => [\n            ...prev,\n            { role: 'assistant', content: 'I couldn\\'t detect a barcode in this image. Please try another image with a clear barcode.' }\n          ]);\n        } finally {\n          setIsScanning(false);\n        }\n      };\n      fileReader.readAsArrayBuffer(selectedImage);\n      */\n    } catch (err) {\n      console.error(\"Error initializing scanner:\", err);\n      setIsScanning(false);\n    }\n  };\n  \n  const handleClearImage = () => {\n    setSelectedImage(null);\n    setImagePreview(null);\n    setBarcode('');\n    setProductInfo(null);\n  };\n  \n  const handleProductLookup = async (code) => {\n    // In a real app, this would be an API call to a product database\n    setIsLoading(true);\n    \n    setTimeout(async () => {\n      const product = productDatabase[code] || {\n        name: 'Unknown Product',\n        brand: 'Unknown Brand',\n        ingredients: [\n          { name: 'Ingredient data not found', purpose: '', concerns: [] }\n        ]\n      };\n      \n      setProductInfo(product);\n      \n      // Create a prompt for Gemini\n      const ingredientsList = product.ingredients.map(i => i.name).join(', ');\n      const prompt = `You are a beauty product assistant named Beauty Buddy. You just scanned a product: ${product.name} by ${product.brand}. The ingredients are: ${ingredientsList}. Please introduce yourself and offer to answer questions about these ingredients in a brief, friendly way.`;\n      \n      try {\n        // Get response from Gemini API\n        const geminiResponse = await queryGeminiAPI(prompt);\n        \n        // Add a message to the chat\n        setChatMessages(prev => [\n          ...prev,\n          { \n            role: 'assistant', \n            content: geminiResponse \n          }\n        ]);\n      } catch (error) {\n        console.error('Error getting Gemini response:', error);\n        setChatMessages(prev => [\n          ...prev,\n          { \n            role: 'assistant', \n            content: `Scanned product: ${product.name} by ${product.brand}.\\nI can answer questions about the ingredients. What would you like to know?` \n          }\n        ]);\n      }\n      \n      setIsLoading(false);\n    }, 1500);\n  };\n  \n  const handleChatSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!userMessage.trim()) return;\n    \n    // Add user message to chat\n    setChatMessages(prev => [\n      ...prev,\n      { role: 'user', content: userMessage }\n    ]);\n    \n    const currentMessage = userMessage;\n    \n    // Clear input field\n    setUserMessage('');\n    \n    // Set loading state\n    setIsLoading(true);\n    \n    if (productInfo) {\n      // Create context about the product and ingredients\n      const ingredientsList = productInfo.ingredients.map(i => {\n        const concerns = i.concerns.length > 0 ? `(Concerns: ${i.concerns.join(', ')})` : '(No known concerns)';\n        return `${i.name}: ${i.purpose} ${concerns}`;\n      }).join('\\n');\n      \n      const prompt = `You are a beauty product assistant named Beauty Buddy. A user scanned ${productInfo.name} by ${productInfo.brand} with these ingredients:\n${ingredientsList}\n\nThe chat history is:\n${chatMessages.map(msg => `${msg.role}: ${msg.content}`).join('\\n')}\n\nThe user's question is: ${currentMessage}\n\nProvide a helpful, accurate response about these ingredients. Be concise but informative. If you don't know something specific, be honest about it. Focus on the ingredient information provided.`;\n      \n      try {\n        // Get response from Gemini API\n        const geminiResponse = await queryGeminiAPI(prompt);\n        \n        // Add assistant response to chat\n        setChatMessages(prev => [\n          ...prev,\n          { role: 'assistant', content: geminiResponse }\n        ]);\n      } catch (error) {\n        console.error('Error getting Gemini response:', error);\n        setChatMessages(prev => [\n          ...prev,\n          { role: 'assistant', content: \"I'm having trouble analyzing the ingredients right now. Please try asking again later.\" }\n        ]);\n      }\n    } else {\n      // No product scanned yet\n      setChatMessages(prev => [\n        ...prev,\n        { role: 'assistant', content: \"Please scan a product barcode first so I can help you with ingredient information.\" }\n      ]);\n    }\n    \n    setIsLoading(false);\n  };\n  \n  return (\n    <section className=\"ingredients-container\">\n      <h1>Ingredient Checker</h1>\n      <p>Upload a product image with a barcode to check ingredients and ask questions about them.</p>\n      \n      <div className=\"scanner-chat-layout\">\n        <div className=\"scanner-section\">\n          <div id=\"scanner-container\" className=\"scanner-container\" style={{display: 'none'}}></div>\n          \n          <div className=\"upload-container\">\n            {!imagePreview ? (\n              <div className=\"upload-box\">\n                <label htmlFor=\"image-upload\" className=\"upload-label\">\n                  <div className=\"upload-icon\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                      <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path>\n                      <polyline points=\"17 8 12 3 7 8\"></polyline>\n                      <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line>\n                    </svg>\n                  </div>\n                  <p>Click to upload a product image with barcode</p>\n                </label>\n                <input \n                  type=\"file\" \n                  id=\"image-upload\" \n                  accept=\"image/*\" \n                  onChange={handleImageChange} \n                  style={{ display: 'none' }}\n                />\n              </div>\n            ) : (\n              <div className=\"image-preview-container\">\n                <img src={imagePreview} alt=\"Preview\" className=\"image-preview\" />\n                <div className=\"preview-actions\">\n                  <button \n                    className=\"analyze-btn\" \n                    onClick={handleScanBarcode}\n                    disabled={isScanning}\n                  >\n                    {isScanning ? 'Scanning Barcode...' : 'Scan Barcode'}\n                  </button>\n                  <button className=\"clear-btn\" onClick={handleClearImage}>\n                    Clear\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n          \n          {barcode && (\n            <div className=\"barcode-result\">\n              <p>Barcode: {barcode}</p>\n              {productInfo && (\n                <div className=\"product-info\">\n                  <h3>{productInfo.name}</h3>\n                  <p>Brand: {productInfo.brand}</p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n        \n        <div className=\"chat-section\">\n          <h2>Beauty Buddy</h2>\n          <p>Ask about the ingredients in your scanned products</p>\n          \n          <div className=\"chat-container\" ref={chatContainerRef}>\n            <div className=\"chat-messages\">\n              {chatMessages.map((message, index) => (\n                <div key={index} className={`message ${message.role}`}>\n                  {message.content}\n                </div>\n              ))}\n              {isLoading && (\n                <div className=\"message assistant loading\">\n                  <span className=\"loading-dot\"></span>\n                  <span className=\"loading-dot\"></span>\n                  <span className=\"loading-dot\"></span>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <form onSubmit={handleChatSubmit} className=\"chat-input-form\">\n            <input\n              type=\"text\"\n              value={userMessage}\n              onChange={(e) => setUserMessage(e.target.value)}\n              placeholder=\"Ask about the ingredients...\"\n              className=\"chat-input\"\n            />\n            <button type=\"submit\" className=\"chat-submit\" disabled={isLoading}>\n              Send\n            </button>\n          </form>\n        </div>\n      </div>\n    </section>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}